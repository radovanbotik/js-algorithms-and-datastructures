                                    Merge Sort
It is combination of splitting mergin and sorting
It is exploits the fact that arrays of 0 or 1 elements are always sorted
    -   Empty array or array of number is always sorted. [],[9] it is sorted.
It works by decomposing an array into smaller arrays of 0 or 1 elements,
then building up a newly sorted array.
                            [8,3,5,4,7,6,1,2]
                        split in 2 we get 2 arrays
                        [8,3,5,4]           [7,6,1,2]
                    they are still too big so we split again
                    [8,3]   [5,4]          [7,6]    [1,2]
                            still not small enough
                  [8]  [3]  [5]  [4]      [7]   [6]  [1]  [2]
        Now we merge them together because now each array is sorted
        We compare neighboring arrays, and merge them in the order
                    [3,8]   [4,5]           [6,7]   [1,2]
        Now that each array is sorted we we will merge it width
        neigboring array again. We will compare inputs and merge them
        in the order
                        [3,4,5,8]          [1,2,6,7]
                        And we repeat the process again
                                [1,2,3,4,5,6,7,8]

1.  In order to implement merge sort, its useful to first implement a function
    responsible for merging two SORTED arrays
2.  Given two arrays which are SORTED this helper function should create
    a new array which is also sorted and consists of all the elements from
    the inputs
3.  This function should run in O(n+m) time and O(n+m) space and SHOULD not modify
    the paramters passed to it.

Merge Arrays:
1.  Create an empty array that you return in the end.
    take a look at the smallest values in each input array.
    Set up 2 counters that start at 0. i=0;j=0;
2.  While there are still values we havent look at, meaning that
    i,j havent hit the end of their respective arrays we gonna take the
    value of the first item in the first array and compare it to the first value in the
    second array.
    
    If the value in the first array is smaller than value in the second array,
    push the value in the first array into array we created and move onto next value
    in the first array

    If the value in the first array is larger than value in the second array,
    push the value in the second array into array we created and move onto next value
    in the second array

    Once we exhaust once array, push in all remaining values from the other array
    into new array.
    
    HOWEVER THE INPUT ARRAYS MUST BE SORTED!!

Steps:
1.  Break up the array into halves until you have arrays that are 
    empty or have one element.
    you can use slice method and recursion to achieve it
2.  Once you have smaller sorted arrays merge those arrays with other arrays
    until you are back at the full length of the array. 
3.  Once the array has been merged back together return the merged and sorted array.