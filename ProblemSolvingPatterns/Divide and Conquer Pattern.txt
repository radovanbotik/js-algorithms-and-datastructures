                            Divide and Conquer pattern

1.  This pattern involves dividing a data set into smaller chunks 
    and then repeating a process with a subset of data

2.  This pattern can tremendously decrease time complexity.

#Ex:

1.  Given a SORTED array of integers write a function called search,
    that accepts a value and returns the index where the value passed 
    to the functions is located inside of the array.
    If the value is not found return -1

    search([1,2,3,4,5,6],4)     // 3
    search([1,2,3,4,5,6],6)     // 5
    search([1,2,3,4,5,6],11)    //-1 not found

#Naive solution:
#   It is also labeled as LINEAR SEARCH 
#   Time complexity - O(n)

1.  Loop through the array and compare the value accessed in each iteration
    to the number provided
    Once we find match return index

2.  If there is no match return -1


const search = (arr, n) => {
  for (let i = 0; i < arr.length; i++) {
    if (arr[i] === n) return i;
  }
  return -1;
};


#Refactor solution:
#   It is also labeled as BINARY SEARCH 
#   Time complexity - Log(n)

#   ([1, 2, 3, 4, 5, 6], 6)
    We look for middle and check if the value that we are looking for
    greater or less than middle
    If it is less than middle than we can ignore all the number in front of the middle
    and redefine new middle in the second half of the array and do the smaller
    [1,2,3,4,5,6] - middle is 3
    is 6 bigger or smaller than 3? It is bigger so we ignore everthing in front of 3
    now we redefine middle from [4,5,6]
    [4,5,6] - middle is 5
    is 6 bigger or smaller than 5> it is bigger so we ignore everything in front of 5
    now we get 6

const search1 = (arr, n) => {
  let min = 0;
  let max = arr.length - 1;

  while (min <= max) {
    let middle = Math.floor((min + max) / 2);
    let currentElement = arr[middle];

    if (arr[middle] < n) {
      min = middle + 1;
    } else if (arr[middle] > n) {
      max = middle - 1;
    } else {
      return middle;
    }
  }
  return -1;
};