                        Frequency Counter

1.  This pattern uses objects or sets to collect values/frequencies of values
2.  This can often avoid the need for nested loops or O(n²) operations
    with arrays/strings

#   Ex:

    Write a function called same which accepts two arrays.
    The Function should return true if every value in the array has
    its corresponding value squared in the second array.
    The frequency of values must be the same. 

#   Naive approach:
#   Time Complexity - O(n²)

function same(arr1, arr2) {
  // Checking the frequency, length. if the length doesnt match return false right away
  if (arr1.length !== arr2.length) {
    return false;
  }
  // Loop through the first array
  //create variable to hold match
  //we ask what is the indexof array[i] of array1 squared by two so,
  //what is the array of (1 squared = 1) inside array2
  //and save the index inside variable called correct Index

  //Then we check correct Index and if returns -1 it means
  //arr2 doesnt have a index for squared value of [i] from arr1
  //and we return false

  //Then we can call splice on arr2 and remove that number from array2

  //We then never return false so we return true

  for (let i = 0; i < arr1.length; i++) {
    let correctIndex = arr2.indexOf(arr1[i] ** 2);
    if (correctIndex === -1) {
      return false;
    }
    console.log(arr2);
    arr2.splice(correctIndex, 1);
  }
  return true;
}

same([1, 2, 3, 2], [9, 1, 4, 4]);

---------------------------------------------------------------------

#   Refactored:
#   Time Complexity - O(n)

1.  We check for the length of arrays
2.  We create an object for each array
3.  We loop through each array one time, individually.
        1.2 2loops is O(2n), 1loop and 1 nested loop in O(n²), so its much better.
        1.3 for every number in each array we check if the number from current
            iteration exists in the object.
            If it doesnt we create it and set to 0 
            If it does we take the value and increase it by 1
        1.4.Then we loop through one of our objects and check if 
            square value of the key of the current iteration DOES NOT exist on the other object
            in that case we return false
            //so we check if 2² doesnt exist on second object
        1.5.We perform another check to see if squared value of the current iteration
            count on other object is different from the count of the current iteration
            on the first object
            //2:2 == 4:2 
            //we have number 2 twice so we also need number 4 twice
            if it is we return false

        1.6 return true

function same(arr1, arr2) {
  if (arr1.length !== arr2.length) {
    return false;
  }
  let frequencyCounter1 = {};
  let frequencyCounter2 = {};
  for (let val of arr1) {
    frequencyCounter1[val] = (frequencyCounter1[val] || 0) + 1;
  }
  for (let val of arr2) {
    frequencyCounter2[val] = (frequencyCounter2[val] || 0) + 1;
  }
  console.log(frequencyCounter1);
  console.log(frequencyCounter2);
  for (let key in frequencyCounter1) {
    if (!(key ** 2 in frequencyCounter2)) {
      return false;
    }
    if (frequencyCounter2[key ** 2] !== frequencyCounter1[key]) {
      return false;
    }
  }
  return true;
}

same([1, 2, 3, 2], [9, 1, 4, 4]);
